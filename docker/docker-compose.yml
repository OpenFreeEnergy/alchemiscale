version: '3.8'

# Custom top-level network
networks:
  neo4j-internal:


services:
  neo4j:
    image: ${NEO4J_DOCKER_IMAGE:-neo4j:4.4}
    hostname: neo4j
    # Service-level network, which specifies the networks, from the list of the top-level networks (in this case only neo4j-internal), that the server will connect to.
    # Adds a network alias (used in neo4j.conf when configuring the discovery members)
    networks:
      neo4j-internal:
        aliases:
          - neo4j-network

    # The ports that will be accessible from outside the container - HTTP (7474) and Bolt (7687).
    ports:
      - "7474:7474"
      - "7687:7687"

    # Uncomment the volumes to be mounted to make them accessible from outside the container.
    volumes:
      #- ./neo4j.conf:/conf/neo4j.conf # This is the main configuration file.
      - ${NEO4J_DATA_STORE:?err}:/var/lib/neo4j/data
      #- ./data/server:/var/lib/neo4j/data
      #- ./logs/neo4j:/var/lib/neo4j/logs
      #- ./conf/neo4j:/var/lib/neo4j/conf
      #- ./import/neo4j:/var/lib/neo4j/import
      #- ./metrics/neo4j:/var/lib/neo4j/metrics
      #- ./licenses/neo4j:/var/lib/neo4j/licenses
      #- ./ssl/neo4j:/var/lib/neo4j/ssl

    # Passes the following environment variables to the container
    environment:
      - NEO4J_AUTH=${NEO4J_USER:?err}/${NEO4J_PASS:?err}
      - NEO4J_EDITION=docker_compose

    # Simple check testing whether the port 7474 is opened.
    # If so, the instance running inside the container is considered as "healthy".
    # This status can be checked using the "docker ps" command.
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]

    # Set up the user
    user: ${USER_ID}:${GROUP_ID}
  fah-alchemy-client-API:
    image: ghcr.io/mikemhenry/fah-alchemy:latest
    networks:
      - neo4j-internal
    ports:
      - "9292:9292"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?err}
      - JWT_EXPIRE_SECONDS=${JWT_EXPIRE_SECONDS:-1800}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:?err}
      - AWS_S3_PREFIX=${AWS_S3_PREFIX:?err}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:?err}
      - NEO4J_URL=${NEO4J_URL:?err}
      - NEO4J_USER=${NEO4J_USER:?err}
      - NEO4J_PASS=${NEO4J_PASS:?err}
    depends_on: 
      - neo4j
      - fah-alchemy-compute-API
    command: "api --host 0.0.0.0 --port 9292 --workers 2"
  fah-alchemy-compute-API:
    image: ghcr.io/mikemhenry/fah-alchemy:latest
    networks:
      - neo4j-internal
    ports:
      - "9291:9291"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?err}
      - JWT_EXPIRE_SECONDS=${JWT_EXPIRE_SECONDS:-1800}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:?err}
      - AWS_S3_PREFIX=${AWS_S3_PREFIX:?err}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:?err}
      - NEO4J_URL=${NEO4J_URL:?err}
      - NEO4J_USER=${NEO4J_USER:?err}
      - NEO4J_PASS=${NEO4J_PASS:?err}
    depends_on: 
      neo4j:
        condition: service_healthy
    command: "compute api --host 0.0.0.0 --port 9291 --workers 2"
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.9
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
